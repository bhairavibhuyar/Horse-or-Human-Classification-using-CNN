# -*- coding: utf-8 -*-
"""CNN_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Kk7gXwNPN4RDJ00zk7eSAy7VCqhL9YR

**Horse or Human Classification using CNN**
"""

# training dataset
!wget https://storage.googleapis.com/tensorflow-1-public/course2/week3/horse-or-human.zip

# validation dataset
!wget https://storage.googleapis.com/tensorflow-1-public/course2/week3/validation-horse-or-human.zip

#Unzip the dataset import zipfile
import zipfile

local_zip = './horse-or-human.zip'
zip_ref = zipfile.ZipFile (local_zip, 'r')
zip_ref.extractall('./horse-or-human')

local_zip = './validation-horse-or-human.zip'
zip_ref = zipfile.ZipFile (local_zip, 'r')
zip_ref.extractall('./validation-horse-or-human')

zip_ref.close()

import tensorflow as tf
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

#Defining the model

model = tf.keras.models.Sequential([

    #First convulation
    Conv2D(16, (3,3), activation = 'relu', input_shape = (300,300,3)), MaxPooling2D(2,2),

    #Second convulation
    Conv2D(32, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),

    #Third convulation
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),

    #Fourth convulation
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),

    #Fifh convulation
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),

    #Flatten the results to feed into DNN
    Flatten(),

    #512 neuron hidden layer
    Dense(512, activation = 'relu'),

    Dropout(0.5),

    #Only 1 output neuron. It will contain a value from 0-1 where
    #0 for one class ('horse') and 1 for the other ('humans')
    Dense(1, activation = 'sigmoid')
])

#Summarizing the model architecture
model.summary()

from keras.optimizers import RMSprop

model.compile(loss = 'binary_crossentropy',
              optimizer = RMSprop(learning_rate = 0.001),    #RMS: root mean square
              metrics = ['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1/255)
validation_datagen = ImageDataGenerator(rescale = 1/255)

train_generator = train_datagen.flow_from_directory(
    './horse-or-human/',
    target_size = (300,300),
    batch_size = 128,
    class_mode = 'binary')

validation_generator = validation_datagen.flow_from_directory(
    './validation-horse-or-human/',
    target_size = (300,300),
    batch_size = 32,
    class_mode = 'binary')

history = model.fit(
    train_generator,
    steps_per_epoch = 8,
    epochs = 14,
    verbose = 1,
    validation_data = validation_generator,
    validation_steps = 8
)

model_json = model.to_json()

with open("model.json", "w") as json_file:
  json_file.write(model_json)
  model.save_weights("m.h5")

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

uploaded = files.upload()

for fn in uploaded.keys():
  #Predicting images
  path = '/content/' + fn
  img = image.load_img(path, target_size=(300,300))
  x = image.img_to_array(img)
  x /= 255
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  #print(classes[0])

  if classes[0]>0.5:
    img = mpimg.imread(path)
    imgplot = plt.imshow(img)
    plt.show()

    print(fn + " is a human!")
    print()

  else:
    img = mpimg.imread(path)
    imgplot = plt.imshow(img)
    plt.show()

    print(fn + " is a horse!")
    print()